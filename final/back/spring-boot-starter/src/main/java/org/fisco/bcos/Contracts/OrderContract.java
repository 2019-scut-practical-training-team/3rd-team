package temp;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint16;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tuples.generated.Tuple8;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class OrderContract extends Contract {
    public static final String BINARY = "6080604052600160035534801561001557600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612b5b806100666000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063185a6f04146100a95780633da95d2a1461015857806342b50a7a146101c45780635715be71146103c457806376f75e7f146104e1578063832f80f11461074d578063987e16ea146107b6578063dfeaaaea14610822578063e2811eb11461088e578063fae92612146108f7575b600080fd5b3480156100b557600080fd5b50610156600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061093a565b005b34801561016457600080fd5b5061016d610c5a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101b0578082015181840152602081019050610195565b505050509050019250505060405180910390f35b3480156101d057600080fd5b506101ef60048036038101908080359060200190929190505050610de1565b60405180806020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018661ffff1661ffff1681526020018560ff1660ff16815260200184810384528b818151815260200191508051906020019080838360005b838110156102b557808201518184015260208101905061029a565b50505050905090810190601f1680156102e25780820380516001836020036101000a031916815260200191505b50848103835288818151815260200191508051906020019080838360005b8381101561031b578082015181840152602081019050610300565b50505050905090810190601f1680156103485780820380516001836020036101000a031916815260200191505b50848103825287818151815260200191508051906020019080838360005b83811015610381578082015181840152602081019050610366565b50505050905090810190601f1680156103ae5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b3480156103d057600080fd5b506104df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803561ffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611260565b005b3480156104ed57600080fd5b5061050c600480360381019080803590602001909291905050506114d7565b60405180806020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018761ffff1661ffff1681526020018660ff1660ff1681526020018060200185810385528d818151815260200191508051906020019080838360005b838110156105d65780820151818401526020810190506105bb565b50505050905090810190601f1680156106035780820380516001836020036101000a031916815260200191505b5085810384528a818151815260200191508051906020019080838360005b8381101561063c578082015181840152602081019050610621565b50505050905090810190601f1680156106695780820380516001836020036101000a031916815260200191505b50858103835289818151815260200191508051906020019080838360005b838110156106a2578082015181840152602081019050610687565b50505050905090810190601f1680156106cf5780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b838110156107085780820151818401526020810190506106ed565b50505050905090810190601f1680156107355780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b34801561075957600080fd5b506107b4600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506117e9565b005b3480156107c257600080fd5b506107cb611f5d565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561080e5780820151818401526020810190506107f3565b505050509050019250505060405180910390f35b34801561082e57600080fd5b506108376120c8565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561087a57808201518184015260208101905061085f565b505050509050019250505060405180910390f35b34801561089a57600080fd5b506108f5600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506121a6565b005b34801561090357600080fd5b50610938600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612478565b005b60008090505b600280549050811015610c555760028181548110151561095c57fe5b906000526020600020906007020160000160405160200180828054600181600116156101000203166002900480156109cb5780601f106109a95761010080835404028352918201916109cb565b820191906000526020600020905b8154815290600101906020018083116109b7575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515610a1457805182526020820191506020810190506020830392506109ef565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040516020018082805190602001908083835b602083101515610a7e5780518252602082019150602081019050602083039250610a59565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515610ae75780518252602082019150602081019050602083039250610ac2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610c48573373ffffffffffffffffffffffffffffffffffffffff16600282815481101515610b4457fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015610bc957506000600282815481101515610ba557fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff16145b1515610bd457600080fd5b6001600282815481101515610be557fe5b906000526020600020906007020160050160026101000a81548160ff021916908360ff16021790555081600282815481101515610c1e57fe5b90600052602060002090600702016006019080519060200190610c429291906129e1565b50610c55565b8080600101915050610940565b505050565b6060600080606033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610cbe57600080fd5b60009350600092505b600280549050831015610d23576001600284815481101515610ce557fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff161415610d165783806001019450505b8280600101935050610cc7565b83604051908082528060200260200182016040528015610d525781602001602082028038833980820191505090505b50915060009350600092505b600280549050831015610dd7576001600284815481101515610d7c57fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff161415610dca57828285815181101515610db357fe5b906020019060200201818152505083806001019450505b8280600101935050610d5e565b8194505050505090565b60606000806060806000803373ffffffffffffffffffffffffffffffffffffffff16600289815481101515610e1257fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610ed157503373ffffffffffffffffffffffffffffffffffffffff16600289815481101515610e8757fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80610f2957503373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515610f3457600080fd5b600288815481101515610f4357fe5b9060005260206000209060070201600001600289815481101515610f6357fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028a815481101515610fa457fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028b815481101515610fe557fe5b906000526020600020906007020160030160028c81548110151561100557fe5b906000526020600020906007020160040160028d81548110151561102557fe5b906000526020600020906007020160050160009054906101000a900461ffff1660028e81548110151561105457fe5b906000526020600020906007020160050160029054906101000a900460ff16868054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111085780601f106110dd57610100808354040283529160200191611108565b820191906000526020600020905b8154815290600101906020018083116110eb57829003601f168201915b50505050509650838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111a45780601f10611179576101008083540402835291602001916111a4565b820191906000526020600020905b81548152906001019060200180831161118757829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112405780601f1061121557610100808354040283529160200191611240565b820191906000526020600020905b81548152906001019060200180831161122357829003601f168201915b505050505092509650965096509650965096509650919395979092949650565b80600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156112bd57600080fd5b6002610100604051908101604052806112d7600354612519565b81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018681526020018561ffff168152602001600060ff168152602001602060405190810160405280600081525081525090806001815401808255809150509060018203906000526020600020906007020160009091929091909150600082015181600001908051906020019061138f929190612a61565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908051906020019061143a929190612a61565b506080820151816004019080519060200190611457929190612a61565b5060a08201518160050160006101000a81548161ffff021916908361ffff16021790555060c08201518160050160026101000a81548160ff021916908360ff16021790555060e08201518160060190805190602001906114b8929190612a61565b5050505060036000815480929190600101919050555050505050505050565b6002818154811015156114e657fe5b9060005260206000209060070201600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115925780601f1061156757610100808354040283529160200191611592565b820191906000526020600020905b81548152906001019060200180831161157557829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561167c5780601f106116515761010080835404028352916020019161167c565b820191906000526020600020905b81548152906001019060200180831161165f57829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561171a5780601f106116ef5761010080835404028352916020019161171a565b820191906000526020600020905b8154815290600101906020018083116116fd57829003601f168201915b5050505050908060050160009054906101000a900461ffff16908060050160029054906101000a900460ff1690806006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117df5780601f106117b4576101008083540402835291602001916117df565b820191906000526020600020905b8154815290600101906020018083116117c257829003601f168201915b5050505050905088565b600033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561184857600080fd5b600091505b600280549050821015611f585760028281548110151561186957fe5b906000526020600020906007020160000160405160200180828054600181600116156101000203166002900480156118d85780601f106118b65761010080835404028352918201916118d8565b820191906000526020600020905b8154815290600101906020018083116118c4575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310151561192157805182526020820191506020810190506020830392506118fc565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040516020018082805190602001908083835b60208310151561198b5780518252602082019150602081019050602083039250611966565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156119f457805182526020820191506020810190506020830392506119cf565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415611f4b576001600283815481101515611a3c57fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff16141515611a6a57600080fd5b60028083815481101515611a7a57fe5b906000526020600020906007020160050160026101000a81548160ff021916908360ff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166345a72129600284815481101515611aef57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600285815481101515611b3057fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600286815481101515611b7157fe5b9060005260206000209060070201600401600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015611cef5780601f10611cc457610100808354040283529160200191611cef565b820191906000526020600020905b815481529060010190602001808311611cd257829003601f168201915b505095505050505050600060405180830381600087803b158015611d1257600080fd5b505af1158015611d26573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663526718c7600284815481101515611d7657fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600285815481101515611db757fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600286815481101515611df857fe5b906000526020600020906007020160050160009054906101000a900461ffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001945050505050600060405180830381600087803b158015611f2e57600080fd5b505af1158015611f42573d6000803e3d6000fd5b50505050611f58565b818060010192505061184d565b505050565b6060806000600160035403604051908082528060200260200182016040528015611f965781602001602082028038833980820191505090505b509150600090505b6002805490508110156120c0573373ffffffffffffffffffffffffffffffffffffffff16600282815481101515611fd157fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061209057503373ffffffffffffffffffffffffffffffffffffffff1660028281548110151561204657fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156120b3578082828151811015156120a457fe5b90602001906020020181815250505b8080600101915050611f9e565b819250505090565b606080600033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561212a57600080fd5b60016003540360405190808252806020026020018201604052801561215e5781602001602082028038833980820191505090505b509250600091505b60028054905082101561219d5781838381518110151561218257fe5b90602001906020020181815250508180600101925050612166565b82935050505090565b600033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561220557600080fd5b600091505b6002805490508210156124735760028281548110151561222657fe5b906000526020600020906007020160000160405160200180828054600181600116156101000203166002900480156122955780601f10612273576101008083540402835291820191612295565b820191906000526020600020905b815481529060010190602001808311612281575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831015156122de57805182526020820191506020810190506020830392506122b9565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040516020018082805190602001908083835b6020831015156123485780518252602082019150602081019050602083039250612323565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156123b1578051825260208201915060208101905060208303925061238c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156124665760016002838154811015156123f957fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff1614151561242757600080fd5b600360028381548110151561243857fe5b906000526020600020906007020160050160026101000a81548160ff021916908360ff160217905550612473565b818060010192505061220a565b505050565b33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156124d557600080fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6060612523612ae1565b60606000610140604051908101604052806040805190810160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f320000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f330000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f340000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f350000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f360000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f370000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f380000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f3900000000000000000000000000000000000000000000000000000000000000815250815250925084905082600a808381151561279357fe5b04028203600a811015156127a357fe5b60200201519150600a818115156127b657fe5b0490505b6000811115612805576127ef83600a80848115156127d457fe5b04028303600a811015156127e457fe5b602002015183612810565b9150600a818115156127fd57fe5b0490506127ba565b819350505050919050565b606080606080606060008088955087945084518651016040519080825280601f01601f1916602001820160405280156128585781602001602082028038833980820191505090505b50935083925060009150600090505b855181101561291a57858181518110151561287e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838060010194508151811015156128dd57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050612867565b600090505b84518110156129d257848181518110151561293657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561299557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061291f565b83965050505050505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a2257805160ff1916838001178555612a50565b82800160010185558215612a50579182015b82811115612a4f578251825591602001919060010190612a34565b5b509050612a5d9190612b0a565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612aa257805160ff1916838001178555612ad0565b82800160010185558215612ad0579182015b82811115612acf578251825591602001919060010190612ab4565b5b509050612add9190612b0a565b5090565b61014060405190810160405280600a905b6060815260200190600190039081612af25790505090565b612b2c91905b80821115612b28576000816000905550600101612b10565b5090565b905600a165627a7a723058205995f4369579eef5e78f46cbf9eee5f47c68c776d0a2162c61ff7ce5f22154220029";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"applyForReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminGetReturnOrderId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getOrderById\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"string\"},{\"name\":\"_petId\",\"type\":\"string\"},{\"name\":\"_petPrice\",\"type\":\"uint16\"},{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"createOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderList\",\"outputs\":[{\"name\":\"orderId\",\"type\":\"string\"},{\"name\":\"orderBuyer\",\"type\":\"address\"},{\"name\":\"orderSeller\",\"type\":\"address\"},{\"name\":\"orderTime\",\"type\":\"string\"},{\"name\":\"petId\",\"type\":\"string\"},{\"name\":\"petPrice\",\"type\":\"uint16\"},{\"name\":\"orderStatus\",\"type\":\"uint8\"},{\"name\":\"returnReason\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"acceptReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userGetOrderId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminGetOrderId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"rejectReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mkAddress\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";

    public static final String FUNC_APPLYFORRETURN = "applyForReturn";

    public static final String FUNC_ADMINGETRETURNORDERID = "adminGetReturnOrderId";

    public static final String FUNC_GETORDERBYID = "getOrderById";

    public static final String FUNC_CREATEORDER = "createOrder";

    public static final String FUNC_ORDERLIST = "orderList";

    public static final String FUNC_ACCEPTRETURN = "acceptReturn";

    public static final String FUNC_USERGETORDERID = "userGetOrderId";

    public static final String FUNC_ADMINGETORDERID = "adminGetOrderId";

    public static final String FUNC_REJECTRETURN = "rejectReturn";

    public static final String FUNC_SETMARKETADDRESS = "setMarketAddress";

    @Deprecated
    protected OrderContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected OrderContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected OrderContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected OrderContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> applyForReturn(String _orderId, String _reason) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_reason)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void applyForReturn(String _orderId, String _reason, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_reason)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String applyForReturnSeq(String _orderId, String _reason) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_reason)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<List> adminGetReturnOrderId() {
        final Function function = new Function(FUNC_ADMINGETRETURNORDERID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple7<String, String, String, String, String, BigInteger, BigInteger>> getOrderById(BigInteger _orderIndex) {
        final Function function = new Function(FUNC_GETORDERBYID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_orderIndex)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple7<String, String, String, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple7<String, String, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> createOrder(String _buyer, String _seller, String _time, String _petId, BigInteger _petPrice, String _caller) {
        final Function function = new Function(
                FUNC_CREATEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_buyer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_seller), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(_petPrice), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_caller)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createOrder(String _buyer, String _seller, String _time, String _petId, BigInteger _petPrice, String _caller, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_buyer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_seller), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(_petPrice), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_caller)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createOrderSeq(String _buyer, String _seller, String _time, String _petId, BigInteger _petPrice, String _caller) {
        final Function function = new Function(
                FUNC_CREATEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_buyer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_seller), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(_petPrice), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_caller)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>> orderList(BigInteger param0) {
        final Function function = new Function(FUNC_ORDERLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>>(
                new Callable<Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple8<String, String, String, String, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> acceptReturn(String _orderId) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void acceptReturn(String _orderId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String acceptReturnSeq(String _orderId) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<List> userGetOrderId() {
        final Function function = new Function(FUNC_USERGETORDERID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> adminGetOrderId() {
        final Function function = new Function(FUNC_ADMINGETORDERID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> rejectReturn(String _orderId) {
        final Function function = new Function(
                FUNC_REJECTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void rejectReturn(String _orderId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REJECTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String rejectReturnSeq(String _orderId) {
        final Function function = new Function(
                FUNC_REJECTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> setMarketAddress(String _mkAddress) {
        final Function function = new Function(
                FUNC_SETMARKETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_mkAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setMarketAddress(String _mkAddress, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETMARKETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_mkAddress)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setMarketAddressSeq(String _mkAddress) {
        final Function function = new Function(
                FUNC_SETMARKETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_mkAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    @Deprecated
    public static OrderContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new OrderContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static OrderContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new OrderContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static OrderContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new OrderContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static OrderContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new OrderContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<OrderContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(OrderContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<OrderContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(OrderContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<OrderContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(OrderContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<OrderContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(OrderContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
