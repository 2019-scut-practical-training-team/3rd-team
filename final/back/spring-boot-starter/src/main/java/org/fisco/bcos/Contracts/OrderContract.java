package org.fisco.bcos.Contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint16;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tuples.generated.Tuple8;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class OrderContract extends Contract {
    public static final String BINARY = "6080604052600160035534801561001557600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613300806100666000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063185a6f04146100ca5780634b92b447146101795780635715be711461021f5780636f0584d61461033c57806376f75e7f146103a8578063832f80f11461061457806384689e2c1461067d578063a57f904f146106e9578063b23983d914610755578063dabe8a71146107fb578063e2811eb1146109fb578063fae9261214610a64578063ff74927b14610aa7575b600080fd5b3480156100d657600080fd5b50610177600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610bcf565b005b34801561018557600080fd5b506101a4600480360381019080803590602001909291905050506111bf565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e45780820151818401526020810190506101c9565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022b57600080fd5b5061033a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803561ffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112df565b005b34801561034857600080fd5b50610351611556565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610394578082015181840152602081019050610379565b505050509050019250505060405180910390f35b3480156103b457600080fd5b506103d3600480360381019080803590602001909291905050506117e1565b60405180806020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018761ffff1661ffff1681526020018660ff1660ff1681526020018060200185810385528d818151815260200191508051906020019080838360005b8381101561049d578082015181840152602081019050610482565b50505050905090810190601f1680156104ca5780820380516001836020036101000a031916815260200191505b5085810384528a818151815260200191508051906020019080838360005b838110156105035780820151818401526020810190506104e8565b50505050905090810190601f1680156105305780820380516001836020036101000a031916815260200191505b50858103835289818151815260200191508051906020019080838360005b8381101561056957808201518184015260208101905061054e565b50505050905090810190601f1680156105965780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b838110156105cf5780820151818401526020810190506105b4565b50505050905090810190601f1680156105fc5780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b34801561062057600080fd5b5061067b600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611af3565b005b34801561068957600080fd5b50610692612267565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156106d55780820151818401526020810190506106ba565b505050509050019250505060405180910390f35b3480156106f557600080fd5b506106fe612345565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610741578082015181840152602081019050610726565b505050509050019250505060405180910390f35b34801561076157600080fd5b50610780600480360381019080803590602001909291905050506124cc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107c05780820151818401526020810190506107a5565b50505050905090810190601f1680156107ed5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561080757600080fd5b50610826600480360381019080803590602001909291905050506127c3565b60405180806020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018661ffff1661ffff1681526020018560ff1660ff16815260200184810384528b818151815260200191508051906020019080838360005b838110156108ec5780820151818401526020810190506108d1565b50505050905090810190601f1680156109195780820380516001836020036101000a031916815260200191505b50848103835288818151815260200191508051906020019080838360005b83811015610952578082015181840152602081019050610937565b50505050905090810190601f16801561097f5780820380516001836020036101000a031916815260200191505b50848103825287818151815260200191508051906020019080838360005b838110156109b857808201518184015260208101905061099d565b50505050905090810190601f1680156109e55780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b348015610a0757600080fd5b50610a62600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612c42565b005b348015610a7057600080fd5b50610aa5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f14565b005b348015610ab357600080fd5b50610b54600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612fb5565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b94578082015181840152602081019050610b79565b50505050905090810190601f168015610bc15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008090505b6002805490508110156111ba57600281815481101515610bf157fe5b90600052602060002090600702016000016040516020018082805460018160011615610100020316600290048015610c605780601f10610c3e576101008083540402835291820191610c60565b820191906000526020600020905b815481529060010190602001808311610c4c575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515610ca95780518252602082019150602081019050602083039250610c84565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040516020018082805190602001908083835b602083101515610d135780518252602082019150602081019050602083039250610cee565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515610d7c5780518252602082019150602081019050602083039250610d57565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156111ad573373ffffffffffffffffffffffffffffffffffffffff16600282815481101515610dd957fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610ebc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f596f7520617265206e6f7420746865206275796572206f662074686973206f7281526020017f646572210000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600282815481101515610ecd57fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff16141515610f64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f54686973206f726465722063616e27742062652072657475726e21000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c03f7d66600284815481101515610fc757fe5b9060005260206000209060070201600401336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156110bf5780601f10611094576101008083540402835291602001916110bf565b820191906000526020600020905b8154815290600101906020018083116110a257829003601f168201915b50509350505050602060405180830381600087803b1580156110e057600080fd5b505af11580156110f4573d6000803e3d6000fd5b505050506040513d602081101561110a57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151561113d57600080fd5b600160028281548110151561114e57fe5b906000526020600020906007020160050160026101000a81548160ff021916908360ff1602179055508160028281548110151561118757fe5b906000526020600020906007020160060190805190602001906111ab929190613186565b505b8080600101915050610bd5565b505050565b606033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561121e57600080fd5b60028381548110151561122d57fe5b90600052602060002090600702016006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112d25780601f106112a7576101008083540402835291602001916112d2565b820191906000526020600020905b8154815290600101906020018083116112b557829003601f168201915b5050505050915050919050565b80600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561133c57600080fd5b6002610100604051908101604052806113566003546124cc565b81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018681526020018561ffff168152602001600060ff168152602001602060405190810160405280600081525081525090806001815401808255809150509060018203906000526020600020906007020160009091929091909150600082015181600001908051906020019061140e929190613206565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030190805190602001906114b9929190613206565b5060808201518160040190805190602001906114d6929190613206565b5060a08201518160050160006101000a81548161ffff021916908361ffff16021790555060c08201518160050160026101000a81548160ff021916908360ff16021790555060e0820151816006019080519060200190611537929190613206565b5050505060036000815480929190600101919050555050505050505050565b6060600080606060009250600091505b600280549050821015611673573373ffffffffffffffffffffffffffffffffffffffff1660028381548110151561159957fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061165857503373ffffffffffffffffffffffffffffffffffffffff1660028381548110151561160e57fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156116665782806001019350505b8180600101925050611566565b826040519080825280602002602001820160405280156116a25781602001602082028038833980820191505090505b50905060009250600091505b6002805490508210156117d8573373ffffffffffffffffffffffffffffffffffffffff166002838154811015156116e157fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806117a057503373ffffffffffffffffffffffffffffffffffffffff1660028381548110151561175657fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156117cb578181848151811015156117b457fe5b906020019060200201818152505082806001019350505b81806001019250506116ae565b80935050505090565b6002818154811015156117f057fe5b9060005260206000209060070201600091509050806000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561189c5780601f106118715761010080835404028352916020019161189c565b820191906000526020600020905b81548152906001019060200180831161187f57829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119865780601f1061195b57610100808354040283529160200191611986565b820191906000526020600020905b81548152906001019060200180831161196957829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a245780601f106119f957610100808354040283529160200191611a24565b820191906000526020600020905b815481529060010190602001808311611a0757829003601f168201915b5050505050908060050160009054906101000a900461ffff16908060050160029054906101000a900460ff1690806006018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ae95780601f10611abe57610100808354040283529160200191611ae9565b820191906000526020600020905b815481529060010190602001808311611acc57829003601f168201915b5050505050905088565b600033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611b5257600080fd5b600091505b60028054905082101561226257600282815481101515611b7357fe5b90600052602060002090600702016000016040516020018082805460018160011615610100020316600290048015611be25780601f10611bc0576101008083540402835291820191611be2565b820191906000526020600020905b815481529060010190602001808311611bce575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515611c2b5780518252602082019150602081019050602083039250611c06565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040516020018082805190602001908083835b602083101515611c955780518252602082019150602081019050602083039250611c70565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515611cfe5780518252602082019150602081019050602083039250611cd9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415612255576001600283815481101515611d4657fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff16141515611d7457600080fd5b60028083815481101515611d8457fe5b906000526020600020906007020160050160026101000a81548160ff021916908360ff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166345a72129600284815481101515611df957fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600285815481101515611e3a57fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600286815481101515611e7b57fe5b9060005260206000209060070201600401600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015611ff95780601f10611fce57610100808354040283529160200191611ff9565b820191906000526020600020905b815481529060010190602001808311611fdc57829003601f168201915b505095505050505050600060405180830381600087803b15801561201c57600080fd5b505af1158015612030573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663526718c760028481548110151561208057fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002858154811015156120c157fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028681548110151561210257fe5b906000526020600020906007020160050160009054906101000a900461ffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001945050505050600060405180830381600087803b15801561223857600080fd5b505af115801561224c573d6000803e3d6000fd5b50505050612262565b8180600101925050611b57565b505050565b606080600033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156122c957600080fd5b6001600354036040519080825280602002602001820160405280156122fd5781602001602082028038833980820191505090505b509250600091505b60028054905082101561233c5781838381518110151561232157fe5b90602001906020020181815250508180600101925050612305565b82935050505090565b6060600080606033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156123a957600080fd5b60009350600092505b60028054905083101561240e5760016002848154811015156123d057fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff1614156124015783806001019450505b82806001019350506123b2565b8360405190808252806020026020018201604052801561243d5781602001602082028038833980820191505090505b50915060009350600092505b6002805490508310156124c257600160028481548110151561246757fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff1614156124b55782828581518110151561249e57fe5b906020019060200201818152505083806001019450505b8280600101935050612449565b8194505050505090565b60606124d6613286565b60606000610140604051908101604052806040805190810160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f320000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f330000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f340000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f350000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f360000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f370000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f380000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f3900000000000000000000000000000000000000000000000000000000000000815250815250925084905082600a808381151561274657fe5b04028203600a8110151561275657fe5b60200201519150600a8181151561276957fe5b0490505b60008111156127b8576127a283600a808481151561278757fe5b04028303600a8110151561279757fe5b602002015183612fb5565b9150600a818115156127b057fe5b04905061276d565b819350505050919050565b60606000806060806000803373ffffffffffffffffffffffffffffffffffffffff166002898154811015156127f457fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806128b357503373ffffffffffffffffffffffffffffffffffffffff1660028981548110151561286957fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b8061290b57503373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b151561291657600080fd5b60028881548110151561292557fe5b906000526020600020906007020160000160028981548110151561294557fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028a81548110151561298657fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028b8154811015156129c757fe5b906000526020600020906007020160030160028c8154811015156129e757fe5b906000526020600020906007020160040160028d815481101515612a0757fe5b906000526020600020906007020160050160009054906101000a900461ffff1660028e815481101515612a3657fe5b906000526020600020906007020160050160029054906101000a900460ff16868054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612aea5780601f10612abf57610100808354040283529160200191612aea565b820191906000526020600020905b815481529060010190602001808311612acd57829003601f168201915b50505050509650838054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b865780601f10612b5b57610100808354040283529160200191612b86565b820191906000526020600020905b815481529060010190602001808311612b6957829003601f168201915b50505050509350828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c225780601f10612bf757610100808354040283529160200191612c22565b820191906000526020600020905b815481529060010190602001808311612c0557829003601f168201915b505050505092509650965096509650965096509650919395979092949650565b600033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515612ca157600080fd5b600091505b600280549050821015612f0f57600282815481101515612cc257fe5b90600052602060002090600702016000016040516020018082805460018160011615610100020316600290048015612d315780601f10612d0f576101008083540402835291820191612d31565b820191906000526020600020905b815481529060010190602001808311612d1d575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515612d7a5780518252602082019150602081019050602083039250612d55565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040516020018082805190602001908083835b602083101515612de45780518252602082019150602081019050602083039250612dbf565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515612e4d5780518252602082019150602081019050602083039250612e28565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415612f02576001600283815481101515612e9557fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff16141515612ec357600080fd5b6003600283815481101515612ed457fe5b906000526020600020906007020160050160026101000a81548160ff021916908360ff160217905550612f0f565b8180600101925050612ca6565b505050565b33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515612f7157600080fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b606080606080606060008088955087945084518651016040519080825280601f01601f191660200182016040528015612ffd5781602001602082028038833980820191505090505b50935083925060009150600090505b85518110156130bf57858181518110151561302357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561308257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061300c565b600090505b84518110156131775784818151811015156130db57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561313a57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506130c4565b83965050505050505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106131c757805160ff19168380011785556131f5565b828001600101855582156131f5579182015b828111156131f45782518255916020019190600101906131d9565b5b50905061320291906132af565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061324757805160ff1916838001178555613275565b82800160010185558215613275579182015b82811115613274578251825591602001919060010190613259565b5b50905061328291906132af565b5090565b61014060405190810160405280600a905b60608152602001906001900390816132975790505090565b6132d191905b808211156132cd5760008160009055506001016132b5565b5090565b905600a165627a7a7230582082919638dd9c8f7f6d4dc5066ffd3043edd5062e75c213ffc4bb16add13688410029";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"applyForReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getReturnReasonByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"string\"},{\"name\":\"_petId\",\"type\":\"string\"},{\"name\":\"_petPrice\",\"type\":\"uint16\"},{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"createOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userGetOrderIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderList\",\"outputs\":[{\"name\":\"orderId\",\"type\":\"string\"},{\"name\":\"orderBuyer\",\"type\":\"address\"},{\"name\":\"orderSeller\",\"type\":\"address\"},{\"name\":\"orderTime\",\"type\":\"string\"},{\"name\":\"petId\",\"type\":\"string\"},{\"name\":\"petPrice\",\"type\":\"uint16\"},{\"name\":\"orderStatus\",\"type\":\"uint8\"},{\"name\":\"returnReason\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"acceptReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminGetOrderIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminGetReturnOrderIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"getIntToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getOrderByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"rejectReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mkAddress\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"strConcat\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";

    public static final String FUNC_APPLYFORRETURN = "applyForReturn";

    public static final String FUNC_GETRETURNREASONBYINDEX = "getReturnReasonByIndex";

    public static final String FUNC_CREATEORDER = "createOrder";

    public static final String FUNC_USERGETORDERINDEX = "userGetOrderIndex";

    public static final String FUNC_ORDERLIST = "orderList";

    public static final String FUNC_ACCEPTRETURN = "acceptReturn";

    public static final String FUNC_ADMINGETORDERINDEX = "adminGetOrderIndex";

    public static final String FUNC_ADMINGETRETURNORDERINDEX = "adminGetReturnOrderIndex";

    public static final String FUNC_GETINTTOSTRING = "getIntToString";

    public static final String FUNC_GETORDERBYINDEX = "getOrderByIndex";

    public static final String FUNC_REJECTRETURN = "rejectReturn";

    public static final String FUNC_SETMARKETADDRESS = "setMarketAddress";

    public static final String FUNC_STRCONCAT = "strConcat";

    @Deprecated
    protected OrderContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected OrderContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected OrderContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected OrderContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> applyForReturn(String _orderId, String _reason) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_reason)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void applyForReturn(String _orderId, String _reason, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_reason)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String applyForReturnSeq(String _orderId, String _reason) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_reason)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> getReturnReasonByIndex(BigInteger _orderIndex) {
        final Function function = new Function(FUNC_GETRETURNREASONBYINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_orderIndex)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> createOrder(String _buyer, String _seller, String _time, String _petId, BigInteger _petPrice, String _caller) {
        final Function function = new Function(
                FUNC_CREATEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_buyer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_seller), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(_petPrice), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_caller)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createOrder(String _buyer, String _seller, String _time, String _petId, BigInteger _petPrice, String _caller, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_buyer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_seller), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(_petPrice), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_caller)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createOrderSeq(String _buyer, String _seller, String _time, String _petId, BigInteger _petPrice, String _caller) {
        final Function function = new Function(
                FUNC_CREATEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_buyer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_seller), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(_petPrice), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_caller)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<List> userGetOrderIndex() {
        final Function function = new Function(FUNC_USERGETORDERINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>> orderList(BigInteger param0) {
        final Function function = new Function(FUNC_ORDERLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>>(
                new Callable<Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple8<String, String, String, String, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> acceptReturn(String _orderId) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void acceptReturn(String _orderId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String acceptReturnSeq(String _orderId) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<List> adminGetOrderIndex() {
        final Function function = new Function(FUNC_ADMINGETORDERINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> adminGetReturnOrderIndex() {
        final Function function = new Function(FUNC_ADMINGETRETURNORDERINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<String> getIntToString(BigInteger _input) {
        final Function function = new Function(FUNC_GETINTTOSTRING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_input)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple7<String, String, String, String, String, BigInteger, BigInteger>> getOrderByIndex(BigInteger _orderIndex) {
        final Function function = new Function(FUNC_GETORDERBYINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_orderIndex)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple7<String, String, String, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple7<String, String, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> rejectReturn(String _orderId) {
        final Function function = new Function(
                FUNC_REJECTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void rejectReturn(String _orderId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REJECTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String rejectReturnSeq(String _orderId) {
        final Function function = new Function(
                FUNC_REJECTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> setMarketAddress(String _mkAddress) {
        final Function function = new Function(
                FUNC_SETMARKETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_mkAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setMarketAddress(String _mkAddress, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETMARKETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_mkAddress)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setMarketAddressSeq(String _mkAddress) {
        final Function function = new Function(
                FUNC_SETMARKETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_mkAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> strConcat(String _a, String _b) {
        final Function function = new Function(FUNC_STRCONCAT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_a), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static OrderContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new OrderContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static OrderContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new OrderContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static OrderContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new OrderContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static OrderContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new OrderContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<OrderContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(OrderContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<OrderContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(OrderContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<OrderContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(OrderContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<OrderContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(OrderContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
