package org.fisco.bcos.Contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint16;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tuples.generated.Tuple8;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class OrderContract extends Contract {
    public static final String BINARY = "6080604052600160035534801561001557600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506130fb806100666000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063185a6f04146100bf5780635715be711461016e57806376f75e7f1461028b578063832f80f1146104f757806384689e2c14610560578063987e16ea146105cc578063a57f904f14610638578063b23983d9146106a4578063dabe8a711461074a578063e2811eb11461094a578063fae92612146109b3578063ff74927b146109f6575b600080fd5b3480156100cb57600080fd5b5061016c600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610b1e565b005b34801561017a57600080fd5b50610289600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803561ffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110da565b005b34801561029757600080fd5b506102b660048036038101908080359060200190929190505050611351565b60405180806020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018761ffff1661ffff1681526020018660ff1660ff1681526020018060200185810385528d818151815260200191508051906020019080838360005b83811015610380578082015181840152602081019050610365565b50505050905090810190601f1680156103ad5780820380516001836020036101000a031916815260200191505b5085810384528a818151815260200191508051906020019080838360005b838110156103e65780820151818401526020810190506103cb565b50505050905090810190601f1680156104135780820380516001836020036101000a031916815260200191505b50858103835289818151815260200191508051906020019080838360005b8381101561044c578082015181840152602081019050610431565b50505050905090810190601f1680156104795780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b838110156104b2578082015181840152602081019050610497565b50505050905090810190601f1680156104df5780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b34801561050357600080fd5b5061055e600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611663565b005b34801561056c57600080fd5b50610575611dd7565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156105b857808201518184015260208101905061059d565b505050509050019250505060405180910390f35b3480156105d857600080fd5b506105e1611eb5565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610624578082015181840152602081019050610609565b505050509050019250505060405180910390f35b34801561064457600080fd5b5061064d612140565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610690578082015181840152602081019050610675565b505050509050019250505060405180910390f35b3480156106b057600080fd5b506106cf600480360381019080803590602001909291905050506122c7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561070f5780820151818401526020810190506106f4565b50505050905090810190601f16801561073c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561075657600080fd5b50610775600480360381019080803590602001909291905050506125be565b60405180806020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018661ffff1661ffff1681526020018560ff1660ff16815260200184810384528b818151815260200191508051906020019080838360005b8381101561083b578082015181840152602081019050610820565b50505050905090810190601f1680156108685780820380516001836020036101000a031916815260200191505b50848103835288818151815260200191508051906020019080838360005b838110156108a1578082015181840152602081019050610886565b50505050905090810190601f1680156108ce5780820380516001836020036101000a031916815260200191505b50848103825287818151815260200191508051906020019080838360005b838110156109075780820151818401526020810190506108ec565b50505050905090810190601f1680156109345780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34801561095657600080fd5b506109b1600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612a3d565b005b3480156109bf57600080fd5b506109f4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d0f565b005b348015610a0257600080fd5b50610aa3600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612db0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ae3578082015181840152602081019050610ac8565b50505050905090810190601f168015610b105780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008090505b6002805490508110156110d557600281815481101515610b4057fe5b90600052602060002090600702016000016040516020018082805460018160011615610100020316600290048015610baf5780601f10610b8d576101008083540402835291820191610baf565b820191906000526020600020905b815481529060010190602001808311610b9b575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515610bf85780518252602082019150602081019050602083039250610bd3565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040516020018082805190602001908083835b602083101515610c625780518252602082019150602081019050602083039250610c3d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515610ccb5780518252602082019150602081019050602083039250610ca6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156110c8573373ffffffffffffffffffffffffffffffffffffffff16600282815481101515610d2857fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610e0b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f596f7520617265206e6f7420746865206275796572206f662074686973206f7281526020017f646572210000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600282815481101515610e1c57fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff16141515610eb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f54686973206f726465722063616e27742062652072657475726e21000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663291607e8600284815481101515610f1657fe5b90600052602060002090600702016004016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015610fdb5780601f10610fb057610100808354040283529160200191610fdb565b820191906000526020600020905b815481529060010190602001808311610fbe57829003601f168201915b505092505050602060405180830381600087803b158015610ffb57600080fd5b505af115801561100f573d6000803e3d6000fd5b505050506040513d602081101561102557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151561105857600080fd5b600160028281548110151561106957fe5b906000526020600020906007020160050160026101000a81548160ff021916908360ff160217905550816002828154811015156110a257fe5b906000526020600020906007020160060190805190602001906110c6929190612f81565b505b8080600101915050610b24565b505050565b80600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561113757600080fd5b6002610100604051908101604052806111516003546122c7565b81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018681526020018561ffff168152602001600060ff1681526020016020604051908101604052806000815250815250908060018154018082558091505090600182039060005260206000209060070201600090919290919091506000820151816000019080519060200190611209929190613001565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030190805190602001906112b4929190613001565b5060808201518160040190805190602001906112d1929190613001565b5060a08201518160050160006101000a81548161ffff021916908361ffff16021790555060c08201518160050160026101000a81548160ff021916908360ff16021790555060e0820151816006019080519060200190611332929190613001565b5050505060036000815480929190600101919050555050505050505050565b60028181548110151561136057fe5b9060005260206000209060070201600091509050806000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561140c5780601f106113e15761010080835404028352916020019161140c565b820191906000526020600020905b8154815290600101906020018083116113ef57829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114f65780601f106114cb576101008083540402835291602001916114f6565b820191906000526020600020905b8154815290600101906020018083116114d957829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115945780601f1061156957610100808354040283529160200191611594565b820191906000526020600020905b81548152906001019060200180831161157757829003601f168201915b5050505050908060050160009054906101000a900461ffff16908060050160029054906101000a900460ff1690806006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116595780601f1061162e57610100808354040283529160200191611659565b820191906000526020600020905b81548152906001019060200180831161163c57829003601f168201915b5050505050905088565b600033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156116c257600080fd5b600091505b600280549050821015611dd2576002828154811015156116e357fe5b906000526020600020906007020160000160405160200180828054600181600116156101000203166002900480156117525780601f10611730576101008083540402835291820191611752565b820191906000526020600020905b81548152906001019060200180831161173e575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310151561179b5780518252602082019150602081019050602083039250611776565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040516020018082805190602001908083835b60208310151561180557805182526020820191506020810190506020830392506117e0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310151561186e5780518252602082019150602081019050602083039250611849565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415611dc55760016002838154811015156118b657fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff161415156118e457600080fd5b600280838154811015156118f457fe5b906000526020600020906007020160050160026101000a81548160ff021916908360ff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166345a7212960028481548110151561196957fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002858154811015156119aa57fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002868154811015156119eb57fe5b9060005260206000209060070201600401600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015611b695780601f10611b3e57610100808354040283529160200191611b69565b820191906000526020600020905b815481529060010190602001808311611b4c57829003601f168201915b505095505050505050600060405180830381600087803b158015611b8c57600080fd5b505af1158015611ba0573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663526718c7600284815481101515611bf057fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600285815481101515611c3157fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600286815481101515611c7257fe5b906000526020600020906007020160050160009054906101000a900461ffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001945050505050600060405180830381600087803b158015611da857600080fd5b505af1158015611dbc573d6000803e3d6000fd5b50505050611dd2565b81806001019250506116c7565b505050565b606080600033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611e3957600080fd5b600160035403604051908082528060200260200182016040528015611e6d5781602001602082028038833980820191505090505b509250600091505b600280549050821015611eac57818383815181101515611e9157fe5b90602001906020020181815250508180600101925050611e75565b82935050505090565b6060600080606060009250600091505b600280549050821015611fd2573373ffffffffffffffffffffffffffffffffffffffff16600283815481101515611ef857fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611fb757503373ffffffffffffffffffffffffffffffffffffffff16600283815481101515611f6d57fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15611fc55782806001019350505b8180600101925050611ec5565b826040519080825280602002602001820160405280156120015781602001602082028038833980820191505090505b50905060009250600091505b600280549050821015612137573373ffffffffffffffffffffffffffffffffffffffff1660028381548110151561204057fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806120ff57503373ffffffffffffffffffffffffffffffffffffffff166002838154811015156120b557fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1561212a5781818481518110151561211357fe5b906020019060200201818152505082806001019350505b818060010192505061200d565b80935050505090565b6060600080606033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156121a457600080fd5b60009350600092505b6002805490508310156122095760016002848154811015156121cb57fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff1614156121fc5783806001019450505b82806001019350506121ad565b836040519080825280602002602001820160405280156122385781602001602082028038833980820191505090505b50915060009350600092505b6002805490508310156122bd57600160028481548110151561226257fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff1614156122b05782828581518110151561229957fe5b906020019060200201818152505083806001019450505b8280600101935050612244565b8194505050505090565b60606122d1613081565b60606000610140604051908101604052806040805190810160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f320000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f330000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f340000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f350000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f360000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f370000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f380000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f3900000000000000000000000000000000000000000000000000000000000000815250815250925084905082600a808381151561254157fe5b04028203600a8110151561255157fe5b60200201519150600a8181151561256457fe5b0490505b60008111156125b35761259d83600a808481151561258257fe5b04028303600a8110151561259257fe5b602002015183612db0565b9150600a818115156125ab57fe5b049050612568565b819350505050919050565b60606000806060806000803373ffffffffffffffffffffffffffffffffffffffff166002898154811015156125ef57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806126ae57503373ffffffffffffffffffffffffffffffffffffffff1660028981548110151561266457fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b8061270657503373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b151561271157600080fd5b60028881548110151561272057fe5b906000526020600020906007020160000160028981548110151561274057fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028a81548110151561278157fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028b8154811015156127c257fe5b906000526020600020906007020160030160028c8154811015156127e257fe5b906000526020600020906007020160040160028d81548110151561280257fe5b906000526020600020906007020160050160009054906101000a900461ffff1660028e81548110151561283157fe5b906000526020600020906007020160050160029054906101000a900460ff16868054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128e55780601f106128ba576101008083540402835291602001916128e5565b820191906000526020600020905b8154815290600101906020018083116128c857829003601f168201915b50505050509650838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129815780601f1061295657610100808354040283529160200191612981565b820191906000526020600020905b81548152906001019060200180831161296457829003601f168201915b50505050509350828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a1d5780601f106129f257610100808354040283529160200191612a1d565b820191906000526020600020905b815481529060010190602001808311612a0057829003601f168201915b505050505092509650965096509650965096509650919395979092949650565b600033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515612a9c57600080fd5b600091505b600280549050821015612d0a57600282815481101515612abd57fe5b90600052602060002090600702016000016040516020018082805460018160011615610100020316600290048015612b2c5780601f10612b0a576101008083540402835291820191612b2c565b820191906000526020600020905b815481529060010190602001808311612b18575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515612b755780518252602082019150602081019050602083039250612b50565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040516020018082805190602001908083835b602083101515612bdf5780518252602082019150602081019050602083039250612bba565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515612c485780518252602082019150602081019050602083039250612c23565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415612cfd576001600283815481101515612c9057fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff16141515612cbe57600080fd5b6003600283815481101515612ccf57fe5b906000526020600020906007020160050160026101000a81548160ff021916908360ff160217905550612d0a565b8180600101925050612aa1565b505050565b33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515612d6c57600080fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b606080606080606060008088955087945084518651016040519080825280601f01601f191660200182016040528015612df85781602001602082028038833980820191505090505b50935083925060009150600090505b8551811015612eba578581815181101515612e1e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515612e7d57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050612e07565b600090505b8451811015612f72578481815181101515612ed657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515612f3557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050612ebf565b83965050505050505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612fc257805160ff1916838001178555612ff0565b82800160010185558215612ff0579182015b82811115612fef578251825591602001919060010190612fd4565b5b509050612ffd91906130aa565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061304257805160ff1916838001178555613070565b82800160010185558215613070579182015b8281111561306f578251825591602001919060010190613054565b5b50905061307d91906130aa565b5090565b61014060405190810160405280600a905b60608152602001906001900390816130925790505090565b6130cc91905b808211156130c85760008160009055506001016130b0565b5090565b905600a165627a7a723058207c57909cb56c65ba542cfb11f1a1d91aea1faf22237e073c5d975b36bb4ae5be0029";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"applyForReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"string\"},{\"name\":\"_petId\",\"type\":\"string\"},{\"name\":\"_petPrice\",\"type\":\"uint16\"},{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"createOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderList\",\"outputs\":[{\"name\":\"orderId\",\"type\":\"string\"},{\"name\":\"orderBuyer\",\"type\":\"address\"},{\"name\":\"orderSeller\",\"type\":\"address\"},{\"name\":\"orderTime\",\"type\":\"string\"},{\"name\":\"petId\",\"type\":\"string\"},{\"name\":\"petPrice\",\"type\":\"uint16\"},{\"name\":\"orderStatus\",\"type\":\"uint8\"},{\"name\":\"returnReason\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"acceptReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminGetOrderIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userGetOrderId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminGetReturnOrderIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"getIntToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getOrderByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"rejectReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mkAddress\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"strConcat\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";

    public static final String FUNC_APPLYFORRETURN = "applyForReturn";

    public static final String FUNC_CREATEORDER = "createOrder";

    public static final String FUNC_ORDERLIST = "orderList";

    public static final String FUNC_ACCEPTRETURN = "acceptReturn";

    public static final String FUNC_ADMINGETORDERINDEX = "adminGetOrderIndex";

    public static final String FUNC_USERGETORDERID = "userGetOrderId";

    public static final String FUNC_ADMINGETRETURNORDERINDEX = "adminGetReturnOrderIndex";

    public static final String FUNC_GETINTTOSTRING = "getIntToString";

    public static final String FUNC_GETORDERBYINDEX = "getOrderByIndex";

    public static final String FUNC_REJECTRETURN = "rejectReturn";

    public static final String FUNC_SETMARKETADDRESS = "setMarketAddress";

    public static final String FUNC_STRCONCAT = "strConcat";

    @Deprecated
    protected OrderContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected OrderContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected OrderContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected OrderContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> applyForReturn(String _orderId, String _reason) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_reason)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void applyForReturn(String _orderId, String _reason, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_reason)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String applyForReturnSeq(String _orderId, String _reason) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_reason)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> createOrder(String _buyer, String _seller, String _time, String _petId, BigInteger _petPrice, String _caller) {
        final Function function = new Function(
                FUNC_CREATEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_buyer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_seller), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(_petPrice), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_caller)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createOrder(String _buyer, String _seller, String _time, String _petId, BigInteger _petPrice, String _caller, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_buyer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_seller), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(_petPrice), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_caller)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createOrderSeq(String _buyer, String _seller, String _time, String _petId, BigInteger _petPrice, String _caller) {
        final Function function = new Function(
                FUNC_CREATEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_buyer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_seller), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(_petPrice), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_caller)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>> orderList(BigInteger param0) {
        final Function function = new Function(FUNC_ORDERLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>>(
                new Callable<Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple8<String, String, String, String, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> acceptReturn(String _orderId) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void acceptReturn(String _orderId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String acceptReturnSeq(String _orderId) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<List> adminGetOrderIndex() {
        final Function function = new Function(FUNC_ADMINGETORDERINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> userGetOrderId() {
        final Function function = new Function(FUNC_USERGETORDERID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> adminGetReturnOrderIndex() {
        final Function function = new Function(FUNC_ADMINGETRETURNORDERINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<String> getIntToString(BigInteger _input) {
        final Function function = new Function(FUNC_GETINTTOSTRING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_input)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple7<String, String, String, String, String, BigInteger, BigInteger>> getOrderByIndex(BigInteger _orderIndex) {
        final Function function = new Function(FUNC_GETORDERBYINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_orderIndex)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple7<String, String, String, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple7<String, String, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> rejectReturn(String _orderId) {
        final Function function = new Function(
                FUNC_REJECTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void rejectReturn(String _orderId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REJECTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String rejectReturnSeq(String _orderId) {
        final Function function = new Function(
                FUNC_REJECTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> setMarketAddress(String _mkAddress) {
        final Function function = new Function(
                FUNC_SETMARKETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_mkAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setMarketAddress(String _mkAddress, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETMARKETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_mkAddress)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setMarketAddressSeq(String _mkAddress) {
        final Function function = new Function(
                FUNC_SETMARKETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_mkAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> strConcat(String _a, String _b) {
        final Function function = new Function(FUNC_STRCONCAT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_a), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static OrderContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new OrderContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static OrderContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new OrderContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static OrderContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new OrderContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static OrderContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new OrderContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<OrderContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(OrderContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<OrderContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(OrderContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<OrderContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(OrderContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<OrderContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(OrderContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
