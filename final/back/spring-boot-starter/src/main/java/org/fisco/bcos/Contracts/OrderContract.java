package org.fisco.bcos.Contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint16;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple8;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class OrderContract extends Contract {
    public static final String BINARY = "6080604052600160035534801561001557600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613262806100666000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063185a6f04146100b4578063216cf475146101635780635022dc14146101f35780635715be711461028357806376f75e7f146103a0578063832f80f11461060c57806384608f2614610675578063b23983d914610705578063e2811eb1146107ab578063fae9261214610814578063ff74927b14610857575b600080fd5b3480156100c057600080fd5b50610161600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061097f565b005b34801561016f57600080fd5b50610178610c9f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b857808201518184015260208101905061019d565b50505050905090810190601f1680156101e55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ff57600080fd5b50610208611149565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561024857808201518184015260208101905061022d565b50505050905090810190601f1680156102755780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028f57600080fd5b5061039e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803561ffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611732565b005b3480156103ac57600080fd5b506103cb600480360381019080803590602001909291905050506119a9565b60405180806020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018761ffff1661ffff1681526020018660ff1660ff1681526020018060200185810385528d818151815260200191508051906020019080838360005b8381101561049557808201518184015260208101905061047a565b50505050905090810190601f1680156104c25780820380516001836020036101000a031916815260200191505b5085810384528a818151815260200191508051906020019080838360005b838110156104fb5780820151818401526020810190506104e0565b50505050905090810190601f1680156105285780820380516001836020036101000a031916815260200191505b50858103835289818151815260200191508051906020019080838360005b83811015610561578082015181840152602081019050610546565b50505050905090810190601f16801561058e5780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b838110156105c75780820151818401526020810190506105ac565b50505050905090810190601f1680156105f45780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b34801561061857600080fd5b50610673600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611cbb565b005b34801561068157600080fd5b5061068a6123b1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106ca5780820151818401526020810190506106af565b50505050905090810190601f1680156106f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561071157600080fd5b50610730600480360381019080803590602001909291905050506128e7565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610770578082015181840152602081019050610755565b50505050905090810190601f16801561079d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107b757600080fd5b50610812600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612bde565b005b34801561082057600080fd5b50610855600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e76565b005b34801561086357600080fd5b50610904600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612f17565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610944578082015181840152602081019050610929565b50505050905090810190601f1680156109715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008090505b600280549050811015610c9a576002818154811015156109a157fe5b90600052602060002090600702016000016040516020018082805460018160011615610100020316600290048015610a105780601f106109ee576101008083540402835291820191610a10565b820191906000526020600020905b8154815290600101906020018083116109fc575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515610a595780518252602082019150602081019050602083039250610a34565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040516020018082805190602001908083835b602083101515610ac35780518252602082019150602081019050602083039250610a9e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515610b2c5780518252602082019150602081019050602083039250610b07565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610c8d573373ffffffffffffffffffffffffffffffffffffffff16600282815481101515610b8957fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015610c0e57506000600282815481101515610bea57fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff16145b1515610c1957600080fd5b6001600282815481101515610c2a57fe5b906000526020600020906007020160050160026101000a81548160ff021916908360ff16021790555081600282815481101515610c6357fe5b90600052602060002090600702016006019080519060200190610c879291906130e8565b50610c9a565b8080600101915050610985565b505050565b606080600080600033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610d0457600080fd5b600091505b60028054905082101561113e57610dd885600284815481101515610d2957fe5b90600052602060002090600702016000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dce5780601f10610da357610100808354040283529160200191610dce565b820191906000526020600020905b815481529060010190602001808311610db157829003601f168201915b5050505050612f17565b9450610e19856040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b9450610edd85600284815481101515610e2e57fe5b90600052602060002090600702016003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ed35780601f10610ea857610100808354040283529160200191610ed3565b820191906000526020600020905b815481529060010190602001808311610eb657829003601f168201915b5050505050612f17565b9450610f1e856040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b9450610fe285600284815481101515610f3357fe5b90600052602060002090600702016004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fd85780601f10610fad57610100808354040283529160200191610fd8565b820191906000526020600020905b815481529060010190602001808311610fbb57829003601f168201915b5050505050612f17565b9450611023856040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b94506110698561106460028581548110151561103b57fe5b906000526020600020906007020160050160009054906101000a900461ffff1661ffff166128e7565b612f17565b94506110aa856040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b94506110ee856110e96002858154811015156110c257fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff166128e7565b612f17565b945061112f856040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b94508180600101925050610d09565b849550505050505090565b606080600080600033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156111ae57600080fd5b600091505b6002805490508210156117275760016002838154811015156111d157fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff16141561171a576112bb8560028481548110151561120c57fe5b90600052602060002090600702016000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112b15780601f10611286576101008083540402835291602001916112b1565b820191906000526020600020905b81548152906001019060200180831161129457829003601f168201915b5050505050612f17565b94506112fc856040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b94506113c08560028481548110151561131157fe5b90600052602060002090600702016003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113b65780601f1061138b576101008083540402835291602001916113b6565b820191906000526020600020905b81548152906001019060200180831161139957829003601f168201915b5050505050612f17565b9450611401856040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b94506114c58560028481548110151561141657fe5b90600052602060002090600702016004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114bb5780601f10611490576101008083540402835291602001916114bb565b820191906000526020600020905b81548152906001019060200180831161149e57829003601f168201915b5050505050612f17565b9450611506856040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b945061154c8561154760028581548110151561151e57fe5b906000526020600020906007020160050160009054906101000a900461ffff1661ffff166128e7565b612f17565b945061158d856040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b94506115d1856115cc6002858154811015156115a557fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff166128e7565b612f17565b9450611612856040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b94506116d68560028481548110151561162757fe5b90600052602060002090600702016006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116cc5780601f106116a1576101008083540402835291602001916116cc565b820191906000526020600020905b8154815290600101906020018083116116af57829003601f168201915b5050505050612f17565b9450611717856040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b94505b81806001019250506111b3565b849550505050505090565b80600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561178f57600080fd5b6002610100604051908101604052806117a96003546128e7565b81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018681526020018561ffff168152602001600060ff1681526020016020604051908101604052806000815250815250908060018154018082558091505090600182039060005260206000209060070201600090919290919091506000820151816000019080519060200190611861929190613168565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908051906020019061190c929190613168565b506080820151816004019080519060200190611929929190613168565b5060a08201518160050160006101000a81548161ffff021916908361ffff16021790555060c08201518160050160026101000a81548160ff021916908360ff16021790555060e082015181600601908051906020019061198a929190613168565b5050505060036000815480929190600101919050555050505050505050565b6002818154811015156119b857fe5b9060005260206000209060070201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a645780601f10611a3957610100808354040283529160200191611a64565b820191906000526020600020905b815481529060010190602001808311611a4757829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b4e5780601f10611b2357610100808354040283529160200191611b4e565b820191906000526020600020905b815481529060010190602001808311611b3157829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bec5780601f10611bc157610100808354040283529160200191611bec565b820191906000526020600020905b815481529060010190602001808311611bcf57829003601f168201915b5050505050908060050160009054906101000a900461ffff16908060050160029054906101000a900460ff1690806006018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cb15780601f10611c8657610100808354040283529160200191611cb1565b820191906000526020600020905b815481529060010190602001808311611c9457829003601f168201915b5050505050905088565b60008033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611d1b57600080fd5b600091505b600280549050821015611f1357600282815481101515611d3c57fe5b90600052602060002090600702016000016040516020018082805460018160011615610100020316600290048015611dab5780601f10611d89576101008083540402835291820191611dab565b820191906000526020600020905b815481529060010190602001808311611d97575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515611df45780518252602082019150602081019050602083039250611dcf565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916846040516020018082805190602001908083835b602083101515611e5e5780518252602082019150602081019050602083039250611e39565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515611ec75780518252602082019150602081019050602083039250611ea2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415611f0657819250611f13565b8180600101925050611d20565b60028084815481101515611f2357fe5b906000526020600020906007020160050160026101000a81548160ff021916908360ff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166345a72129600285815481101515611f9857fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600286815481101515611fd957fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028781548110151561201a57fe5b9060005260206000209060070201600401336040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156121765780601f1061214b57610100808354040283529160200191612176565b820191906000526020600020905b81548152906001019060200180831161215957829003601f168201915b505095505050505050600060405180830381600087803b15801561219957600080fd5b505af11580156121ad573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663526718c76002858154811015156121fd57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028681548110151561223e57fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028781548110151561227f57fe5b906000526020600020906007020160050160009054906101000a900461ffff16336040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001945050505050600060405180830381600087803b15801561239357600080fd5b505af11580156123a7573d6000803e3d6000fd5b5050505050505050565b60608060008060008090505b6002805490508110156128dd573373ffffffffffffffffffffffffffffffffffffffff166002828154811015156123f057fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806124af57503373ffffffffffffffffffffffffffffffffffffffff1660028281548110151561246557fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156128d057612576846002838154811015156124c757fe5b90600052602060002090600702016000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561256c5780601f106125415761010080835404028352916020019161256c565b820191906000526020600020905b81548152906001019060200180831161254f57829003601f168201915b5050505050612f17565b93506125b7846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b935061267b846002838154811015156125cc57fe5b90600052602060002090600702016003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126715780601f1061264657610100808354040283529160200191612671565b820191906000526020600020905b81548152906001019060200180831161265457829003601f168201915b5050505050612f17565b93506126bc846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b9350612780846002838154811015156126d157fe5b90600052602060002090600702016004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127765780601f1061274b57610100808354040283529160200191612776565b820191906000526020600020905b81548152906001019060200180831161275957829003601f168201915b5050505050612f17565b93506127c1846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b9350612807846128026002848154811015156127d957fe5b906000526020600020906007020160050160009054906101000a900461ffff1661ffff166128e7565b612f17565b9350612848846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b935061288c8461288760028481548110151561286057fe5b906000526020600020906007020160050160029054906101000a900460ff1660ff166128e7565b612f17565b93506128cd846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612f17565b93505b80806001019150506123bd565b8394505050505090565b60606128f16131e8565b60606000610140604051908101604052806040805190810160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f320000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f330000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f340000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f350000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f360000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f370000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f380000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f3900000000000000000000000000000000000000000000000000000000000000815250815250925084905082600a8083811515612b6157fe5b04028203600a81101515612b7157fe5b60200201519150600a81811515612b8457fe5b0490505b6000811115612bd357612bbd83600a8084811515612ba257fe5b04028303600a81101515612bb257fe5b602002015183612f17565b9150600a81811515612bcb57fe5b049050612b88565b819350505050919050565b60008033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515612c3e57600080fd5b600091505b600280549050821015612e3657600282815481101515612c5f57fe5b90600052602060002090600702016000016040516020018082805460018160011615610100020316600290048015612cce5780601f10612cac576101008083540402835291820191612cce565b820191906000526020600020905b815481529060010190602001808311612cba575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515612d175780518252602082019150602081019050602083039250612cf2565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916846040516020018082805190602001908083835b602083101515612d815780518252602082019150602081019050602083039250612d5c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515612dea5780518252602082019150602081019050602083039250612dc5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415612e2957819250612e36565b8180600101925050612c43565b6003600284815481101515612e4757fe5b906000526020600020906007020160050160026101000a81548160ff021916908360ff16021790555050505050565b33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515612ed357600080fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b606080606080606060008088955087945084518651016040519080825280601f01601f191660200182016040528015612f5f5781602001602082028038833980820191505090505b50935083925060009150600090505b8551811015613021578581815181101515612f8557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515612fe457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050612f6e565b600090505b84518110156130d957848181518110151561303d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561309c57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613026565b83965050505050505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061312957805160ff1916838001178555613157565b82800160010185558215613157579182015b8281111561315657825182559160200191906001019061313b565b5b5090506131649190613211565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106131a957805160ff19168380011785556131d7565b828001600101855582156131d7579182015b828111156131d65782518255916020019190600101906131bb565b5b5090506131e49190613211565b5090565b61014060405190810160405280600a905b60608152602001906001900390816131f95790505090565b61323391905b8082111561322f576000816000905550600101613217565b5090565b905600a165627a7a72305820badac2aa1fb54c4a2f2b34814dbcbe892d9fa788a8e4c8a6203c9f402513d0c50029";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"applyForReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adminGetOrderList\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adminGetReturnOrderList\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"string\"},{\"name\":\"_petId\",\"type\":\"string\"},{\"name\":\"_petPrice\",\"type\":\"uint16\"},{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"createOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderList\",\"outputs\":[{\"name\":\"orderId\",\"type\":\"string\"},{\"name\":\"orderBuyer\",\"type\":\"address\"},{\"name\":\"orderSeller\",\"type\":\"address\"},{\"name\":\"orderTime\",\"type\":\"string\"},{\"name\":\"petId\",\"type\":\"string\"},{\"name\":\"petPrice\",\"type\":\"uint16\"},{\"name\":\"orderStatus\",\"type\":\"uint8\"},{\"name\":\"returnReason\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"acceptReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userGetOrderList\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"getIntToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"rejectReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mkAddress\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"strConcat\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";

    public static final String FUNC_APPLYFORRETURN = "applyForReturn";

    public static final String FUNC_ADMINGETORDERLIST = "adminGetOrderList";

    public static final String FUNC_ADMINGETRETURNORDERLIST = "adminGetReturnOrderList";

    public static final String FUNC_CREATEORDER = "createOrder";

    public static final String FUNC_ORDERLIST = "orderList";

    public static final String FUNC_ACCEPTRETURN = "acceptReturn";

    public static final String FUNC_USERGETORDERLIST = "userGetOrderList";

    public static final String FUNC_GETINTTOSTRING = "getIntToString";

    public static final String FUNC_REJECTRETURN = "rejectReturn";

    public static final String FUNC_SETMARKETADDRESS = "setMarketAddress";

    public static final String FUNC_STRCONCAT = "strConcat";

    @Deprecated
    protected OrderContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected OrderContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected OrderContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected OrderContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> applyForReturn(String _orderId, String _reason) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_reason)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void applyForReturn(String _orderId, String _reason, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_reason)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String applyForReturnSeq(String _orderId, String _reason) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_reason)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> adminGetOrderList() {
        final Function function = new Function(
                FUNC_ADMINGETORDERLIST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void adminGetOrderList(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADMINGETORDERLIST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String adminGetOrderListSeq() {
        final Function function = new Function(
                FUNC_ADMINGETORDERLIST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> adminGetReturnOrderList() {
        final Function function = new Function(
                FUNC_ADMINGETRETURNORDERLIST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void adminGetReturnOrderList(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADMINGETRETURNORDERLIST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String adminGetReturnOrderListSeq() {
        final Function function = new Function(
                FUNC_ADMINGETRETURNORDERLIST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> createOrder(String _buyer, String _seller, String _time, String _petId, BigInteger _petPrice, String _caller) {
        final Function function = new Function(
                FUNC_CREATEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_buyer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_seller), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(_petPrice), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_caller)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createOrder(String _buyer, String _seller, String _time, String _petId, BigInteger _petPrice, String _caller, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_buyer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_seller), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(_petPrice), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_caller)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createOrderSeq(String _buyer, String _seller, String _time, String _petId, BigInteger _petPrice, String _caller) {
        final Function function = new Function(
                FUNC_CREATEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_buyer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_seller), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(_petPrice), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_caller)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>> orderList(BigInteger param0) {
        final Function function = new Function(FUNC_ORDERLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>>(
                new Callable<Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple8<String, String, String, String, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> acceptReturn(String _orderId) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void acceptReturn(String _orderId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String acceptReturnSeq(String _orderId) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> userGetOrderList() {
        final Function function = new Function(FUNC_USERGETORDERLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getIntToString(BigInteger _input) {
        final Function function = new Function(FUNC_GETINTTOSTRING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_input)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> rejectReturn(String _orderId) {
        final Function function = new Function(
                FUNC_REJECTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void rejectReturn(String _orderId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REJECTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String rejectReturnSeq(String _orderId) {
        final Function function = new Function(
                FUNC_REJECTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> setMarketAddress(String _mkAddress) {
        final Function function = new Function(
                FUNC_SETMARKETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_mkAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setMarketAddress(String _mkAddress, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETMARKETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_mkAddress)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setMarketAddressSeq(String _mkAddress) {
        final Function function = new Function(
                FUNC_SETMARKETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_mkAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> strConcat(String _a, String _b) {
        final Function function = new Function(FUNC_STRCONCAT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_a), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static OrderContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new OrderContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static OrderContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new OrderContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static OrderContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new OrderContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static OrderContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new OrderContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<OrderContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(OrderContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<OrderContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(OrderContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<OrderContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(OrderContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<OrderContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(OrderContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
