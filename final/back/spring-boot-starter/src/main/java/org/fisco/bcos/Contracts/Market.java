package org.fisco.bcos.Contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple8;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class Market extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061733580620000616000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063216cf47514610117578063258a9ab81461023757806325ad91ce146102dd5780632fa6c31b146102f45780634a1474461461031f5780634d26c96e146103af5780635022dc141461053a57806363f0beee1461065a57806369aeddec146108f157806376f75e7f14610981578063832f80f114610c4457806384608f2614610cad57806399c7fa8e14610dcd578063ba5b5ed414610e36578063be27c4cc14610feb578063d61dd40f14611042578063e2811eb1146110ab578063f3907a8814611114578063faf37959146111a7578063ff74927b14611210575b600080fd5b34801561012357600080fd5b5061012c611338565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610174578082015181840152602081019050610159565b50505050905090810190601f1680156101a15780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019060200280838360005b838110156101dd5780820151818401526020810190506101c2565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561021f578082015181840152602081019050610204565b50505050905001965050505050505060405180910390f35b34801561024357600080fd5b5061026260048036038101908080359060200190929190505050611bb7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102a2578082015181840152602081019050610287565b50505050905090810190601f1680156102cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102e957600080fd5b506102f2611eae565b005b34801561030057600080fd5b50610309611f4b565b6040518082815260200191505060405180910390f35b34801561032b57600080fd5b50610334611f92565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610374578082015181840152602081019050610359565b50505050905090810190601f1680156103a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103bb57600080fd5b50610538600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506127a8565b005b34801561054657600080fd5b5061054f612e4f565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561059757808201518184015260208101905061057c565b50505050905090810190601f1680156105c45780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019060200280838360005b838110156106005780820151818401526020810190506105e5565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015610642578082015181840152602081019050610627565b50505050905001965050505050505060405180910390f35b34801561066657600080fd5b50610685600480360381019080803590602001909291905050506136f8565b6040518080602001806020018060200189815260200188815260200180602001806020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186810386528e818151815260200191508051906020019080838360005b838110156107135780820151818401526020810190506106f8565b50505050905090810190601f1680156107405780820380516001836020036101000a031916815260200191505b5086810385528d818151815260200191508051906020019080838360005b8381101561077957808201518184015260208101905061075e565b50505050905090810190601f1680156107a65780820380516001836020036101000a031916815260200191505b5086810384528c818151815260200191508051906020019080838360005b838110156107df5780820151818401526020810190506107c4565b50505050905090810190601f16801561080c5780820380516001836020036101000a031916815260200191505b50868103835289818151815260200191508051906020019080838360005b8381101561084557808201518184015260208101905061082a565b50505050905090810190601f1680156108725780820380516001836020036101000a031916815260200191505b50868103825288818151815260200191508051906020019080838360005b838110156108ab578082015181840152602081019050610890565b50505050905090810190601f1680156108d85780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b3480156108fd57600080fd5b50610906613a67565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561094657808201518184015260208101905061092b565b50505050905090810190601f1680156109735780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561098d57600080fd5b506109ac60048036038101908080359060200190929190505050614095565b60405180806020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001806020018781526020018060200186810386528e818151815260200191508051906020019080838360005b83811015610a66578082015181840152602081019050610a4b565b50505050905090810190601f168015610a935780820380516001836020036101000a031916815260200191505b5086810385528b818151815260200191508051906020019080838360005b83811015610acc578082015181840152602081019050610ab1565b50505050905090810190601f168015610af95780820380516001836020036101000a031916815260200191505b5086810384528a818151815260200191508051906020019080838360005b83811015610b32578082015181840152602081019050610b17565b50505050905090810190601f168015610b5f5780820380516001836020036101000a031916815260200191505b50868103835289818151815260200191508051906020019080838360005b83811015610b98578082015181840152602081019050610b7d565b50505050905090810190601f168015610bc55780820380516001836020036101000a031916815260200191505b50868103825287818151815260200191508051906020019080838360005b83811015610bfe578082015181840152602081019050610be3565b50505050905090810190601f168015610c2b5780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b348015610c5057600080fd5b50610cab600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614424565b005b348015610cb957600080fd5b50610cc261470f565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610d0a578082015181840152602081019050610cef565b50505050905090810190601f168015610d375780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019060200280838360005b83811015610d73578082015181840152602081019050610d58565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015610db5578082015181840152602081019050610d9a565b50505050905001965050505050505060405180910390f35b348015610dd957600080fd5b50610e34600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061501d565b005b348015610e4257600080fd5b50610fe9600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061544d565b005b348015610ff757600080fd5b5061102c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506156a1565b6040518082815260200191505060405180910390f35b34801561104e57600080fd5b506110a9600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506156ea565b005b3480156110b757600080fd5b50611112600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506158de565b005b34801561112057600080fd5b506111a5600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050615a87565b005b3480156111b357600080fd5b5061120e600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050615aa2565b005b34801561121c57600080fd5b506112bd600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050615f9b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156112fd5780820151818401526020810190506112e2565b50505050905090810190601f16801561132a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60608060608060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561139e57600080fd5b600090505b600280549050811015611a9557611472846002838154811015156113c357fe5b90600052602060002090600802016000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114685780601f1061143d57610100808354040283529160200191611468565b820191906000526020600020905b81548152906001019060200180831161144b57829003601f168201915b5050505050615f9b565b93506114b3846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b9350611577846002838154811015156114c857fe5b90600052602060002090600802016003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561156d5780601f106115425761010080835404028352916020019161156d565b820191906000526020600020905b81548152906001019060200180831161155057829003601f168201915b5050505050615f9b565b93506115b8846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b935061167c846002838154811015156115cd57fe5b90600052602060002090600802016004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116725780601f1061164757610100808354040283529160200191611672565b820191906000526020600020905b81548152906001019060200180831161165557829003601f168201915b5050505050615f9b565b93506116bd846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b9350611781846002838154811015156116d257fe5b90600052602060002090600802016005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117775780601f1061174c57610100808354040283529160200191611777565b820191906000526020600020905b81548152906001019060200180831161175a57829003601f168201915b5050505050615f9b565b93506117c2846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b93506117f6846117f16002848154811015156117da57fe5b906000526020600020906008020160060154611bb7565b615f9b565b9350611837846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b93506118fb8460028381548110151561184c57fe5b90600052602060002090600802016007018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118f15780601f106118c6576101008083540402835291602001916118f1565b820191906000526020600020905b8154815290600101906020018083116118d457829003601f168201915b5050505050615f9b565b935061193c846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b93508260028281548110151561194e57fe5b906000526020600020906008020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050816002828154811015156119f357fe5b906000526020600020906008020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080806001019150506113a3565b83838381805480602002602001604051908101604052809291908181526020018280548015611b1957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611acf575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015611ba157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611b57575b5050505050905096509650965050505050909192565b6060611bc1616ef9565b60606000610140604051908101604052806040805190810160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f320000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f330000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f340000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f350000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f360000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f370000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f380000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600181526020017f3900000000000000000000000000000000000000000000000000000000000000815250815250925084905082600a8083811515611e3157fe5b05028203600a81101515611e4157fe5b60200201519150600a81811515611e5457fe5b0590505b6000811315611ea357611e8d83600a8084811515611e7257fe5b05028303600a81101515611e8257fe5b602002015183615f9b565b9150600a81811515611e9b57fe5b059050611e58565b819350505050919050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515611efc57600080fd5b611f0461616c565b6001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60608060008090505b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156127a0576120e482600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561203557fe5b90600052602060002090600802016000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120da5780601f106120af576101008083540402835291602001916120da565b820191906000526020600020905b8154815290600101906020018083116120bd57829003601f168201915b5050505050615f9b565b9150612125826040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b915061222682600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561217757fe5b90600052602060002090600802016001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561221c5780601f106121f15761010080835404028352916020019161221c565b820191906000526020600020905b8154815290600101906020018083116121ff57829003601f168201915b5050505050615f9b565b9150612267826040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b915061236882600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156122b957fe5b90600052602060002090600802016002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561235e5780601f106123335761010080835404028352916020019161235e565b820191906000526020600020905b81548152906001019060200180831161234157829003601f168201915b5050505050615f9b565b91506123a9826040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b915061241a82612415600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811015156123fe57fe5b906000526020600020906008020160030154611bb7565b615f9b565b915061245b826040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b91506124cc826124c7600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811015156124b057fe5b906000526020600020906008020160040154611bb7565b615f9b565b915061250d826040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b915061260e82600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561255f57fe5b90600052602060002090600802016005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126045780601f106125d957610100808354040283529160200191612604565b820191906000526020600020905b8154815290600101906020018083116125e757829003601f168201915b5050505050615f9b565b915061264f826040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b915061275082600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156126a157fe5b90600052602060002090600802016006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127465780601f1061271b57610100808354040283529160200191612746565b820191906000526020600020905b81548152906001019060200180831161272957829003601f168201915b5050505050615f9b565b9150612791826040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b91508080600101915050611f9b565b819250505090565b60003373ffffffffffffffffffffffffffffffffffffffff166007876040518082805190602001908083835b6020831015156127f957805182526020820191506020810190506020830392506127d4565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561286f57600080fd5b600090505b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015612e4657856040518082805190602001908083835b6020831015156128f457805182526020820191506020810190506020830392506128cf565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561297157fe5b906000526020600020906008020160010160405180828054600181600116156101000203166002900480156129dd5780601f106129bb5761010080835404028352918201916129dd565b820191906000526020600020905b8154815290600101906020018083116129c9575b50509150506040518091039020600019161415612e3957600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481101515612a4057fe5b90600052602060002090600802016000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ae55780601f10612aba57610100808354040283529160200191612ae5565b820191906000526020600020905b815481529060010190602001808311612ac857829003601f168201915b50505050509650600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481101515612b3857fe5b90600052602060002090600802016002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612bdd5780601f10612bb257610100808354040283529160200191612bdd565b820191906000526020600020905b815481529060010190602001808311612bc057829003601f168201915b50505050509450600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481101515612c3057fe5b9060005260206000209060080201600301549350600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481101515612c9057fe5b90600052602060002090600802016005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612d355780601f10612d0a57610100808354040283529160200191612d35565b820191906000526020600020905b815481529060010190602001808311612d1857829003601f168201915b50505050509250600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481101515612d8857fe5b90600052602060002090600802016006018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e2d5780601f10612e0257610100808354040283529160200191612e2d565b820191906000526020600020905b815481529060010190602001808311612e1057829003601f168201915b50505050509150612e46565b8080600101915050612874565b50505050505050565b60608060608060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612eb557600080fd5b600090505b6002805490508110156135d6576001600282815481101515612ed857fe5b90600052602060002090600802016006015414156135c957612fb284600283815481101515612f0357fe5b90600052602060002090600802016000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612fa85780601f10612f7d57610100808354040283529160200191612fa8565b820191906000526020600020905b815481529060010190602001808311612f8b57829003601f168201915b5050505050615f9b565b9350612ff3846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b93506130b78460028381548110151561300857fe5b90600052602060002090600802016003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156130ad5780601f10613082576101008083540402835291602001916130ad565b820191906000526020600020905b81548152906001019060200180831161309057829003601f168201915b5050505050615f9b565b93506130f8846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b93506131bc8460028381548110151561310d57fe5b90600052602060002090600802016004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131b25780601f10613187576101008083540402835291602001916131b2565b820191906000526020600020905b81548152906001019060200180831161319557829003601f168201915b5050505050615f9b565b93506131fd846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b93506132c18460028381548110151561321257fe5b90600052602060002090600802016005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156132b75780601f1061328c576101008083540402835291602001916132b7565b820191906000526020600020905b81548152906001019060200180831161329a57829003601f168201915b5050505050615f9b565b9350613302846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b93506133368461333160028481548110151561331a57fe5b906000526020600020906008020160060154611bb7565b615f9b565b9350613377846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b935061343b8460028381548110151561338c57fe5b90600052602060002090600802016007018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156134315780601f1061340657610100808354040283529160200191613431565b820191906000526020600020905b81548152906001019060200180831161341457829003601f168201915b5050505050615f9b565b935061347c846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b93508260028281548110151561348e57fe5b906000526020600020906008020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508160028281548110151561353357fe5b906000526020600020906008020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b8080600101915050612eba565b8383838180548060200260200160405190810160405280929190818152602001828054801561365a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613610575b50505050509150808054806020026020016040519081016040528092919081815260200182805480156136e257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613698575b5050505050905096509650965050505050909192565b60018181548110151561370757fe5b9060005260206000209060080201600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156137b35780601f10613788576101008083540402835291602001916137b3565b820191906000526020600020905b81548152906001019060200180831161379657829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156138515780601f1061382657610100808354040283529160200191613851565b820191906000526020600020905b81548152906001019060200180831161383457829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156138ef5780601f106138c4576101008083540402835291602001916138ef565b820191906000526020600020905b8154815290600101906020018083116138d257829003601f168201915b505050505090806003015490806004015490806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156139995780601f1061396e57610100808354040283529160200191613999565b820191906000526020600020905b81548152906001019060200180831161397c57829003601f168201915b505050505090806006018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613a375780601f10613a0c57610100808354040283529160200191613a37565b820191906000526020600020905b815481529060010190602001808311613a1a57829003601f168201915b5050505050908060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905088565b60608060008090505b60018054905081101561408d57613b3f82600183815481101515613a9057fe5b90600052602060002090600802016000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613b355780601f10613b0a57610100808354040283529160200191613b35565b820191906000526020600020905b815481529060010190602001808311613b1857829003601f168201915b5050505050615f9b565b9150613b80826040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b9150613c4482600183815481101515613b9557fe5b90600052602060002090600802016001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613c3a5780601f10613c0f57610100808354040283529160200191613c3a565b820191906000526020600020905b815481529060010190602001808311613c1d57829003601f168201915b5050505050615f9b565b9150613c85826040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b9150613d4982600183815481101515613c9a57fe5b90600052602060002090600802016002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613d3f5780601f10613d1457610100808354040283529160200191613d3f565b820191906000526020600020905b815481529060010190602001808311613d2257829003601f168201915b5050505050615f9b565b9150613d8a826040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b9150613dbe82613db9600184815481101515613da257fe5b906000526020600020906008020160030154611bb7565b615f9b565b9150613dff826040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b9150613e3382613e2e600184815481101515613e1757fe5b906000526020600020906008020160040154611bb7565b615f9b565b9150613e74826040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b9150613f3882600183815481101515613e8957fe5b90600052602060002090600802016005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613f2e5780601f10613f0357610100808354040283529160200191613f2e565b820191906000526020600020905b815481529060010190602001808311613f1157829003601f168201915b5050505050615f9b565b9150613f79826040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b915061403d82600183815481101515613f8e57fe5b90600052602060002090600802016006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156140335780601f1061400857610100808354040283529160200191614033565b820191906000526020600020905b81548152906001019060200180831161401657829003601f168201915b5050505050615f9b565b915061407e826040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b91508080600101915050613a70565b819250505090565b6002818154811015156140a457fe5b9060005260206000209060080201600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156141505780601f1061412557610100808354040283529160200191614150565b820191906000526020600020905b81548152906001019060200180831161413357829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561423a5780601f1061420f5761010080835404028352916020019161423a565b820191906000526020600020905b81548152906001019060200180831161421d57829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156142d85780601f106142ad576101008083540402835291602001916142d8565b820191906000526020600020905b8154815290600101906020018083116142bb57829003601f168201915b505050505090806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156143765780601f1061434b57610100808354040283529160200191614376565b820191906000526020600020905b81548152906001019060200180831161435957829003601f168201915b505050505090806006015490806007018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561441a5780601f106143ef5761010080835404028352916020019161441a565b820191906000526020600020905b8154815290600101906020018083116143fd57829003601f168201915b5050505050905088565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561448257600080fd5b600090505b6002805490508110156145a2576002818154811015156144a357fe5b9060005260206000209060080201600001604051808280546001816001161561010002031660029004801561450f5780601f106144ed57610100808354040283529182019161450f565b820191906000526020600020905b8154815290600101906020018083116144fb575b5050915050604051809103902060001916836040518082805190602001908083835b6020831015156145565780518252602082019150602081019050602083039250614531565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415614595578091506145a2565b8080600101915050614487565b600280838154811015156145b257fe5b90600052602060002090600802016006018190555061470a6002838154811015156145d957fe5b906000526020600020906008020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028481548110151561461a57fe5b906000526020600020906008020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028581548110151561465b57fe5b90600052602060002090600802016004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156147005780601f106146d557610100808354040283529160200191614700565b820191906000526020600020905b8154815290600101906020018083116146e357829003601f168201915b50505050506161f9565b505050565b60608060608060008060008090505b600280549050811015614efb573373ffffffffffffffffffffffffffffffffffffffff1660028281548110151561475157fe5b906000526020600020906008020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061481057503373ffffffffffffffffffffffffffffffffffffffff166002828154811015156147c657fe5b906000526020600020906008020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15614eee576148d78460028381548110151561482857fe5b90600052602060002090600802016000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156148cd5780601f106148a2576101008083540402835291602001916148cd565b820191906000526020600020905b8154815290600101906020018083116148b057829003601f168201915b5050505050615f9b565b9350614918846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b93506149dc8460028381548110151561492d57fe5b90600052602060002090600802016003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156149d25780601f106149a7576101008083540402835291602001916149d2565b820191906000526020600020905b8154815290600101906020018083116149b557829003601f168201915b5050505050615f9b565b9350614a1d846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b9350614ae184600283815481101515614a3257fe5b90600052602060002090600802016004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614ad75780601f10614aac57610100808354040283529160200191614ad7565b820191906000526020600020905b815481529060010190602001808311614aba57829003601f168201915b5050505050615f9b565b9350614b22846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b9350614be684600283815481101515614b3757fe5b90600052602060002090600802016005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614bdc5780601f10614bb157610100808354040283529160200191614bdc565b820191906000526020600020905b815481529060010190602001808311614bbf57829003601f168201915b5050505050615f9b565b9350614c27846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b9350614c5b84614c56600284815481101515614c3f57fe5b906000526020600020906008020160060154611bb7565b615f9b565b9350614c9c846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b9350614d6084600283815481101515614cb157fe5b90600052602060002090600802016007018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614d565780601f10614d2b57610100808354040283529160200191614d56565b820191906000526020600020905b815481529060010190602001808311614d3957829003601f168201915b5050505050615f9b565b9350614da1846040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f9b565b935082600282815481101515614db357fe5b906000526020600020906008020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600282815481101515614e5857fe5b906000526020600020906008020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b808060010191505061471e565b83838381805480602002602001604051908101604052809291908181526020018280548015614f7f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311614f35575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561500757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311614fbd575b5050505050905096509650965050505050909192565b6000803373ffffffffffffffffffffffffffffffffffffffff166007846040518082805190602001908083835b60208310151561506f578051825260208201915060208101905060208303925061504a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156150e557600080fd5b600090505b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156152d457600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110151561518057fe5b906000526020600020906008020160010160405180828054600181600116156101000203166002900480156151ec5780601f106151ca5761010080835404028352918201916151ec565b820191906000526020600020905b8154815290600101906020018083116151d8575b5050915050604051809103902060001916836040518082805190602001908083835b602083101515615233578051825260208201915060208101905060208303925061520e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156152c757600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811015156152b657fe5b906000526020600020906008020191505b80806001019150506150ea565b6001829080600181540180825580915050906001820390600052602060002090600802016000909192909190915060008201816000019080546001816001161561010002031660029004615329929190616f22565b5060018201816001019080546001816001161561010002031660029004615351929190616f22565b5060028201816002019080546001816001161561010002031660029004615379929190616f22565b506003820154816003015560048201548160040155600582018160050190805460018160011615610100020316600290046153b5929190616f22565b50600682018160060190805460018160011615610100020316600290046153dd929190616f22565b506007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156154e35761549d616b46565b6001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610100604051908101604052808a81526020018981526020018881526020018781526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050906001820390600052602060002090600802016000909192909190915060008201518160000190805190602001906155ba929190616fa9565b5060208201518160010190805190602001906155d7929190616fa9565b5060408201518160020190805190602001906155f4929190616fa9565b50606082015181600301556080820151816004015560a0820151816005019080519060200190615625929190616fa9565b5060c0820151816006019080519060200190615642929190616fa9565b5060e08201518160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506156978782616b9a565b5050505050505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600090505b60028054905081101561580d5760028181548110151561570e57fe5b9060005260206000209060080201600001604051808280546001816001161561010002031660029004801561577a5780601f1061575857610100808354040283529182019161577a565b820191906000526020600020905b815481529060010190602001808311615766575b5050915050604051809103902060001916836040518082805190602001908083835b6020831015156157c1578051825260208201915060208101905060208303925061579c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156158005780915061580d565b80806001019150506156f2565b3373ffffffffffffffffffffffffffffffffffffffff1660028381548110151561583357fe5b906000526020600020906008020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156158a85750600060028381548110151561589457fe5b906000526020600020906008020160060154145b15156158b357600080fd5b60016002838154811015156158c457fe5b906000526020600020906008020160060181905550505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561593c57600080fd5b600090505b600280549050811015615a5c5760028181548110151561595d57fe5b906000526020600020906008020160000160405180828054600181600116156101000203166002900480156159c95780601f106159a75761010080835404028352918201916159c9565b820191906000526020600020905b8154815290600101906020018083116159b5575b5050915050604051809103902060001916836040518082805190602001908083835b602083101515615a1057805182526020820191506020810190506020830392506159eb565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415615a4f57809150615a5c565b8080600101915050615941565b6003600283815481101515615a6d57fe5b906000526020600020906008020160060181905550505050565b615a92338284616c48565b615a9d8133856161f9565b505050565b6000803373ffffffffffffffffffffffffffffffffffffffff166007846040518082805190602001908083835b602083101515615af45780518252602082019150602081019050602083039250615acf565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515615b6a57600080fd5b600090505b600180549050811015615d3157600181815481101515615b8b57fe5b90600052602060002090600802016001016040518082805460018160011615610100020316600290048015615bf75780601f10615bd5576101008083540402835291820191615bf7565b820191906000526020600020905b815481529060010190602001808311615be3575b5050915050604051809103902060001916836040518082805190602001908083835b602083101515615c3e5780518252602082019150602081019050602083039250615c19565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415615d2457600181815481101515615c8457fe5b906000526020600020906008020160008082016000615ca39190617029565b600182016000615cb39190617029565b600282016000615cc39190617029565b60038201600090556004820160009055600582016000615ce39190617029565b600682016000615cf39190617029565b6007820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050809150615d31565b8080600101915050615b6f565b8190505b6001808054905003811015615ed3576001808201815481101515615d5557fe5b9060005260206000209060080201600182815481101515615d7257fe5b906000526020600020906008020160008201816000019080546001816001161561010002031660029004615da7929190616f22565b5060018201816001019080546001816001161561010002031660029004615dcf929190616f22565b5060028201816002019080546001816001161561010002031660029004615df7929190616f22565b50600382015481600301556004820154816004015560058201816005019080546001816001161561010002031660029004615e33929190616f22565b5060068201816006019080546001816001161561010002031660029004615e5b929190616f22565b506007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508080600101915050615d35565b600180808054905003815481101515615ee857fe5b906000526020600020906008020160008082016000615f079190617029565b600182016000615f179190617029565b600282016000615f279190617029565b60038201600090556004820160009055600582016000615f479190617029565b600682016000615f579190617029565b6007820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550506001805480919060019003615f959190617071565b50505050565b606080606080606060008088955087945084518651016040519080825280601f01601f191660200182016040528015615fe35781602001602082028038833980820191505090505b50935083925060009150600090505b85518110156160a557858181518110151561600957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561606857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050615ff2565b600090505b845181101561615d5784818151811015156160c157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561612057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506160aa565b83965050505050505092915050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612710600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008573ffffffffffffffffffffffffffffffffffffffff161415151561622257600080fd5b8473ffffffffffffffffffffffffffffffffffffffff166007846040518082805190602001908083835b602083101515616271578051825260208201915060208101905060208303925061624c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156162e757600080fd5b600090505b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561676b57600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110151561638257fe5b906000526020600020906008020160010160405180828054600181600116156101000203166002900480156163ee5780601f106163cc5761010080835404028352918201916163ee565b820191906000526020600020905b8154815290600101906020018083116163da575b5050915050604051809103902060001916836040518082805190602001908083835b6020831015156164355780518252602082019150602081019050602083039250616410565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141561675e57600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156164f757fe5b90600052602060002090600802019080600181540180825580915050906001820390600052602060002090600802016000909192909190915060008201816000019080546001816001161561010002031660029004616557929190616f22565b506001820181600101908054600181600116156101000203166002900461657f929190616f22565b50600282018160020190805460018160011615610100020316600290046165a7929190616f22565b506003820154816003015560048201548160040155600582018160050190805460018160011615610100020316600290046165e3929190616f22565b506006820181600601908054600181600116156101000203166002900461660b929190616f22565b506007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811015156166c257fe5b9060005260206000209060080201600080820160006166e19190617029565b6001820160006166f19190617029565b6002820160006167019190617029565b600382016000905560048201600090556005820160006167219190617029565b6006820160006167319190617029565b6007820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508091505b80806001019150506162ec565b8190505b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156169c357600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001820181548110151561680857fe5b9060005260206000209060080201600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561686257fe5b906000526020600020906008020160008201816000019080546001816001161561010002031660029004616897929190616f22565b50600182018160010190805460018160011615610100020316600290046168bf929190616f22565b50600282018160020190805460018160011615610100020316600290046168e7929190616f22565b50600382015481600301556004820154816004015560058201816005019080546001816001161561010002031660029004616923929190616f22565b506006820181600601908054600181600116156101000203166002900461694b929190616f22565b506007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050808060010191505061676f565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905003815481101515616a5457fe5b906000526020600020906008020160008082016000616a739190617029565b600182016000616a839190617029565b600282016000616a939190617029565b60038201600090556004820160009055600582016000616ab39190617029565b600682016000616ac39190617029565b6007820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003616b3e9190617071565b505050505050565b600080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908054616b969291906170a3565b5050565b806007836040518082805190602001908083835b602083101515616bd35780518252602082019150602081019050602083039250616bae565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515616c6f57600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515616cbd57600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515616d4b57600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515616ef357fe5b50505050565b61014060405190810160405280600a905b6060815260200190600190039081616f0a5790505090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10616f5b5780548555616f98565b82800160010185558215616f9857600052602060002091601f016020900482015b82811115616f97578254825591600101919060010190616f7c565b5b509050616fa5919061723e565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10616fea57805160ff1916838001178555617018565b82800160010185558215617018579182015b82811115617017578251825591602001919060010190616ffc565b5b509050617025919061723e565b5090565b50805460018160011615610100020316600290046000825580601f1061704f575061706e565b601f01602090049060005260206000209081019061706d919061723e565b5b50565b81548183558181111561709e5760080281600802836000526020600020918201910161709d9190617263565b5b505050565b82805482825590600052602060002090600802810192821561722d5760005260206000209160080282015b8281111561722c578282600082018160000190805460018160011615610100020316600290046170ff929190616f22565b5060018201816001019080546001816001161561010002031660029004617127929190616f22565b506002820181600201908054600181600116156101000203166002900461714f929190616f22565b5060038201548160030155600482015481600401556005820181600501908054600181600116156101000203166002900461718b929190616f22565b50600682018160060190805460018160011615610100020316600290046171b3929190616f22565b506007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050916008019190600801906170ce565b5b50905061723a9190617263565b5090565b61726091905b8082111561725c576000816000905550600101617244565b5090565b90565b61730691905b8082111561730257600080820160006172829190617029565b6001820160006172929190617029565b6002820160006172a29190617029565b600382016000905560048201600090556005820160006172c29190617029565b6006820160006172d29190617029565b6007820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600801617269565b5090565b905600a165627a7a72305820672af674ab94b491f94043e8202b177ff16bad561d86b165ebc63c18208a2fdd0029";

    public static final String ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"adminGetOrderList\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_input\",\"type\":\"int256\"}],\"name\":\"getIntToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceOfMe\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPetListFromAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_type\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"int256\"},{\"name\":\"_img\",\"type\":\"string\"},{\"name\":\"_intro\",\"type\":\"string\"}],\"name\":\"changePetInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminGetReturnOrderList\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"petOnSell\",\"outputs\":[{\"name\":\"petName\",\"type\":\"string\"},{\"name\":\"petId\",\"type\":\"string\"},{\"name\":\"petType\",\"type\":\"string\"},{\"name\":\"petPrice\",\"type\":\"int256\"},{\"name\":\"petStatus\",\"type\":\"int256\"},{\"name\":\"petImg\",\"type\":\"string\"},{\"name\":\"petIntro\",\"type\":\"string\"},{\"name\":\"Owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"showPetOnSell\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderList\",\"outputs\":[{\"name\":\"orderId\",\"type\":\"string\"},{\"name\":\"orderBuyer\",\"type\":\"address\"},{\"name\":\"orderSeller\",\"type\":\"address\"},{\"name\":\"orderTime\",\"type\":\"string\"},{\"name\":\"petId\",\"type\":\"string\"},{\"name\":\"petPrice\",\"type\":\"string\"},{\"name\":\"orderStatus\",\"type\":\"int256\"},{\"name\":\"returnResult\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"acceptReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userGetOrderList\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_petId\",\"type\":\"string\"}],\"name\":\"sellPet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_type\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"int256\"},{\"name\":\"_status\",\"type\":\"int256\"},{\"name\":\"_img\",\"type\":\"string\"},{\"name\":\"_intro\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalace\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"applyForReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"rejectReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_petId\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"buyPet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_petId\",\"type\":\"string\"}],\"name\":\"cancelSellPet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"strConcat\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";

    public static final String FUNC_ADMINGETORDERLIST = "adminGetOrderList";

    public static final String FUNC_GETINTTOSTRING = "getIntToString";

    public static final String FUNC_CREATEUSER = "createUser";

    public static final String FUNC_GETBALANCEOFME = "getBalanceOfMe";

    public static final String FUNC_GETPETLISTFROMADDRESS = "getPetListFromAddress";

    public static final String FUNC_CHANGEPETINFO = "changePetInfo";

    public static final String FUNC_ADMINGETRETURNORDERLIST = "adminGetReturnOrderList";

    public static final String FUNC_PETONSELL = "petOnSell";

    public static final String FUNC_SHOWPETONSELL = "showPetOnSell";

    public static final String FUNC_ORDERLIST = "orderList";

    public static final String FUNC_ACCEPTRETURN = "acceptReturn";

    public static final String FUNC_USERGETORDERLIST = "userGetOrderList";

    public static final String FUNC_SELLPET = "sellPet";

    public static final String FUNC_CREATEPET = "createPet";

    public static final String FUNC_GETBALACE = "getBalace";

    public static final String FUNC_APPLYFORRETURN = "applyForReturn";

    public static final String FUNC_REJECTRETURN = "rejectReturn";

    public static final String FUNC_BUYPET = "buyPet";

    public static final String FUNC_CANCELSELLPET = "cancelSellPet";

    public static final String FUNC_STRCONCAT = "strConcat";

    @Deprecated
    protected Market(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Market(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Market(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Market(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple3<String, List<String>, List<String>>> adminGetOrderList() {
        final Function function = new Function(FUNC_ADMINGETORDERLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple3<String, List<String>, List<String>>>(
                new Callable<Tuple3<String, List<String>, List<String>>>() {
                    @Override
                    public Tuple3<String, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, List<String>, List<String>>(
                                (String) results.get(0).getValue(), 
                                convertToNative((List<Address>) results.get(1).getValue()), 
                                convertToNative((List<Address>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteCall<String> getIntToString(BigInteger _input) {
        final Function function = new Function(FUNC_GETINTTOSTRING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_input)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> createUser() {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createUser(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createUserSeq() {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<BigInteger> getBalanceOfMe() {
        final Function function = new Function(FUNC_GETBALANCEOFME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getPetListFromAddress() {
        final Function function = new Function(FUNC_GETPETLISTFROMADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> changePetInfo(String _name, String _id, String _type, BigInteger _price, String _img, String _intro) {
        final Function function = new Function(
                FUNC_CHANGEPETINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_type), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_img), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_intro)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void changePetInfo(String _name, String _id, String _type, BigInteger _price, String _img, String _intro, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEPETINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_type), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_img), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_intro)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String changePetInfoSeq(String _name, String _id, String _type, BigInteger _price, String _img, String _intro) {
        final Function function = new Function(
                FUNC_CHANGEPETINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_type), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_img), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_intro)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple3<String, List<String>, List<String>>> adminGetReturnOrderList() {
        final Function function = new Function(FUNC_ADMINGETRETURNORDERLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple3<String, List<String>, List<String>>>(
                new Callable<Tuple3<String, List<String>, List<String>>>() {
                    @Override
                    public Tuple3<String, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, List<String>, List<String>>(
                                (String) results.get(0).getValue(), 
                                convertToNative((List<Address>) results.get(1).getValue()), 
                                convertToNative((List<Address>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple8<String, String, String, BigInteger, BigInteger, String, String, String>> petOnSell(BigInteger param0) {
        final Function function = new Function(FUNC_PETONSELL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple8<String, String, String, BigInteger, BigInteger, String, String, String>>(
                new Callable<Tuple8<String, String, String, BigInteger, BigInteger, String, String, String>>() {
                    @Override
                    public Tuple8<String, String, String, BigInteger, BigInteger, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, BigInteger, BigInteger, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> showPetOnSell() {
        final Function function = new Function(
                FUNC_SHOWPETONSELL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void showPetOnSell(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SHOWPETONSELL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String showPetOnSellSeq() {
        final Function function = new Function(
                FUNC_SHOWPETONSELL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple8<String, String, String, String, String, String, BigInteger, String>> orderList(BigInteger param0) {
        final Function function = new Function(FUNC_ORDERLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple8<String, String, String, String, String, String, BigInteger, String>>(
                new Callable<Tuple8<String, String, String, String, String, String, BigInteger, String>>() {
                    @Override
                    public Tuple8<String, String, String, String, String, String, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, String, String, String, BigInteger, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> acceptReturn(String _orderId) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void acceptReturn(String _orderId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String acceptReturnSeq(String _orderId) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple3<String, List<String>, List<String>>> userGetOrderList() {
        final Function function = new Function(FUNC_USERGETORDERLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple3<String, List<String>, List<String>>>(
                new Callable<Tuple3<String, List<String>, List<String>>>() {
                    @Override
                    public Tuple3<String, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, List<String>, List<String>>(
                                (String) results.get(0).getValue(), 
                                convertToNative((List<Address>) results.get(1).getValue()), 
                                convertToNative((List<Address>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> sellPet(String _petId) {
        final Function function = new Function(
                FUNC_SELLPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void sellPet(String _petId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SELLPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String sellPetSeq(String _petId) {
        final Function function = new Function(
                FUNC_SELLPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> createPet(String _name, String _id, String _type, BigInteger _price, BigInteger _status, String _img, String _intro, String _owner) {
        final Function function = new Function(
                FUNC_CREATEPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_type), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_price), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_status), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_img), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_intro), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createPet(String _name, String _id, String _type, BigInteger _price, BigInteger _status, String _img, String _intro, String _owner, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_type), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_price), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_status), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_img), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_intro), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createPetSeq(String _name, String _id, String _type, BigInteger _price, BigInteger _status, String _img, String _intro, String _owner) {
        final Function function = new Function(
                FUNC_CREATEPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_type), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_price), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_status), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_img), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_intro), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<BigInteger> getBalace(String _address) {
        final Function function = new Function(FUNC_GETBALACE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_address)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> applyForReturn(String _orderId) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void applyForReturn(String _orderId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String applyForReturnSeq(String _orderId) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> rejectReturn(String _orderId) {
        final Function function = new Function(
                FUNC_REJECTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void rejectReturn(String _orderId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REJECTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String rejectReturnSeq(String _orderId) {
        final Function function = new Function(
                FUNC_REJECTRETURN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> buyPet(String _petId, BigInteger _price, String _seller) {
        final Function function = new Function(
                FUNC_BUYPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_price), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_seller)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void buyPet(String _petId, BigInteger _price, String _seller, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_BUYPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_price), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_seller)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String buyPetSeq(String _petId, BigInteger _price, String _seller) {
        final Function function = new Function(
                FUNC_BUYPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_price), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_seller)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> cancelSellPet(String _petId) {
        final Function function = new Function(
                FUNC_CANCELSELLPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void cancelSellPet(String _petId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CANCELSELLPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String cancelSellPetSeq(String _petId) {
        final Function function = new Function(
                FUNC_CANCELSELLPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_petId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> strConcat(String _a, String _b) {
        final Function function = new Function(FUNC_STRCONCAT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_a), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static Market load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Market(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Market load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Market(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Market load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Market(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Market load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Market(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Market> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Market.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Market> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Market.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Market> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Market.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Market> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Market.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
